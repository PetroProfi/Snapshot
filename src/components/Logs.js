import React, { useEffect, useState } from "react";
import { Box, Message } from "react-bulma-components";
import DOMPurify from 'dompurify';

const logStyle = {
    overflowWrap: 'break-word'
};

const jsonLogToString = (json) => {
    switch(json.type) {
        case 'Vote':
            return(
            <Message color="success">
                <Message.Header>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</Message.Header>
                <Message.Body>
                    –ê–¥—Ä–µ—Å: {json.address}<br />
                    –ü—Ä–æ–µ–∫—Ç: {json.project}<br />
                    –ü—Ä–æ–ø–æ–ª–∑–∞–ª: {json.propolsal}<br />
                    –ì–æ–ª–æ—Å: {json.vote} 
                </Message.Body>
            </Message>);
        case 'Subscribe':
            return(
            <Message color="success">
                <Message.Header>–ü–æ–¥–ø–∏—Å–∫–∞</Message.Header>
                <Message.Body>
                    –ê–¥—Ä–µ—Å: {json.address}<br />
                    –ü—Ä–æ–µ–∫—Ç: {json.project} 
                </Message.Body>
            </Message>);
        case 'Info':
            return(
            <Message color="info">
                <Message.Header>{json.head}</Message.Header>
                <Message.Body>
                    {json.hasOwnProperty('message') ? <span dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(json.message)}}></span> : ''}
                </Message.Body>
            </Message>);
        case 'End':
            return(
            <Message color="success">
                <Message.Header>–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã</Message.Header>
                <Message.Body>
                    {json.message}
                </Message.Body>
            </Message>);
        case 'Error':
            return(
            <Message color="danger">
                <Message.Header>–û—à–∏–±–∫–∞{json.hasOwnProperty('space') ? ` | ${json.space}` : ''}</Message.Header>
                <Message.Body>
                    {json.hasOwnProperty('message') ? <span dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(json.message)}}></span> : ''}
                </Message.Body>
            </Message>);
        case 'ErrorEnd':
            return(
            <Message color="danger">
                <Message.Header>–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞</Message.Header>
                <Message.Body>
                    {json.head}<br />
                    {json.hasOwnProperty('message') ? <span dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(json.message)}}></span> : ''}
                </Message.Body>
            </Message>);
        default:
            return(
            <Message color="danger">
                <Message.Header>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö</Message.Header>
                <Message.Body>
                    –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–ª–æ —Å –±–µ–∫—ç–Ω–¥–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö.
                </Message.Body>
            </Message>);
    }
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤

export default function Logs({ lastJsonMessage, page, isStarted }) {
    const [messageHistory, setMessageHistory] = useState([]);
    useEffect(() => {
        if (lastJsonMessage !== null) {
            setMessageHistory((prev) => prev.concat(lastJsonMessage));
        }
    }, [lastJsonMessage, setMessageHistory]);
    useEffect(() => {
        if (isStarted) {
            setMessageHistory([]);
        }
    }, [isStarted, setMessageHistory]);
    return (
        <>
            <Box style={page === 1 ? {...logStyle, display: 'block'} : {...logStyle, display: 'none'}}>
                {messageHistory.length !== 0 ? messageHistory.map((json) => jsonLogToString(json)).reverse() : '–ø—É—Å—Ç–æ üòâ'}
            </Box>
        </>
    );
}