import React, { useEffect, useState, useCallback, useRef } from "react";
import useWebSocket from 'react-use-websocket';
import { Box } from "react-bulma-components";
import { INPUT_TYPE, RADIO_BUTTON_TYPE, CHECKBOX_TYPE, WS_TYPE } from "shared";
import { deepCheck, validateEth, validateProposal, validateIntegerWithHyphen } from "../services/form";
import jsonLogToString from "../services/log";
import { useWindowSize } from "../services/window";
import { ToastContext } from "../contexts/ToastContext";
import { InputContext } from "../contexts/InputContext";
import ParentComponent from './ParentComponent';
import NavBar from "./html/NavBar";
import InputText from "./html/InputText";
import RadioButton from "./html/RadioButton";
import CheckBox from "./html/CheckBox";
import SendButton from "./html/SendButton";
import Title from "./Title";
import Logs from "./Logs";
import Toast from "./Toast";

export default function MainPanel() {
    // –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–µ–∫–µ–Ω–¥–∞
    const [isStarted, setStarted] = useState(false);
    // –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    const [messageHistory, setMessageHistory] = useState(['–ø–æ–∫–∞ —Ç—É—Ç –ø—É—Å—Ç–æ üòâ']);
    // –ò–Ω–ø—É—Ç—ã –¥–ª—è —Ñ–æ—Ä–º—ã
    const projectRef = useRef('');
    const propolsalRef = useRef('');
    const selectorInputRef = useRef('');
    const sleepRef = useRef('');
    const typeVotingRef = useRef('0');
    const parsePropsRef = useRef('');
    // –ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const [page, setPage] = useState(0);
    const { sendJsonMessage, lastJsonMessage, readyState } = useWebSocket('ws://localhost/api', {
        shouldReconnect: () => true,
        reconnectInterval: 5000
    });
    const size = useWindowSize();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±–µ–∫–µ–Ω–¥ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–æ–∫–µ—Ç

    const handleClickStartVote = useCallback(() => sendJsonMessage({
        type: 'Vote',
        project: projectRef.current,
        propolsal: propolsalRef.current,
        vote: selectorInputRef.current,
        sleep: sleepRef.current,
        typeVote: typeVotingRef.current,
        parseProps: parsePropsRef.current
    }), [sendJsonMessage, projectRef, propolsalRef, selectorInputRef, sleepRef, typeVotingRef, parsePropsRef]);

    const handleClickStopVote = useCallback(() => sendJsonMessage({ type: 'Stop' }), [sendJsonMessage]);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ

    const onVote = () => {
        if (!deepCheck(INPUT_TYPE.PROJECT, validateEth(projectRef.current), '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ .eth')) {
            return;
        } else if (!parsePropsRef.current && !deepCheck(INPUT_TYPE.PROPOLSAL, validateProposal(propolsalRef.current), 'ID –ø—Ä–æ–ø–æ–ª–∑–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ –∏–º–µ—Ç—å –¥–ª–∏–Ω–Ω—É 66 —Å–∏–º–≤–æ–ª–æ–≤')) {
            return;
        } else if (!deepCheck(INPUT_TYPE.SELECTOR, validateIntegerWithHyphen(selectorInputRef.current), '–í–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')) {
            return;
        } else if (!deepCheck(INPUT_TYPE.SLEEP, validateIntegerWithHyphen(sleepRef.current), '–ó–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')) {
            return;
        }
        setStarted(true);
        handleClickStartVote();
    };

    const onStop = () => {
        setStarted(false);
        handleClickStopVote();
    };

    useEffect(() => {
        if (lastJsonMessage !== null) {
            setMessageHistory((prev) => [jsonLogToString(lastJsonMessage), ...prev]);
            if (lastJsonMessage.type === WS_TYPE.END || lastJsonMessage.type === WS_TYPE.ERROR_END) {
                setStarted(false);
            }
        }
    }, [lastJsonMessage, setMessageHistory]);

    useEffect(() => {
        if (isStarted) {
            setMessageHistory([]);
        }
    }, [isStarted, setMessageHistory]);

    // –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –≤—Å–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    return (
        <ToastContext.Provider value={{toast: lastJsonMessage, readyState, setStarted, page, setPage, size, isStarted, messageHistory}}>
            {page === 0 ? <Title title={`${process.env.REACT_APP_NAME} v${process.env.REACT_APP_VERSION} | –ì–ª–∞–≤–Ω–∞—è`} /> : <Title title={`${process.env.REACT_APP_NAME} v${process.env.REACT_APP_VERSION} | –õ–æ–≥–∏`} />}
            <Toast />
            <NavBar />
            <ParentComponent>
                <Box style={page === 0 ? {display: 'block'} : {display: 'none'}}>
                    <InputContext.Provider value={{projectRef, propolsalRef, selectorInputRef, sleepRef, typeVotingRef, parsePropsRef}}>
                        <InputText type={INPUT_TYPE.PROJECT} />
                        <InputText type={INPUT_TYPE.PROPOLSAL} />
                        <InputText type={INPUT_TYPE.SELECTOR} />
                        <InputText type={INPUT_TYPE.SLEEP} />
                        <RadioButton type={RADIO_BUTTON_TYPE.VOTE} />
                        <CheckBox type={CHECKBOX_TYPE.PARSEPROPS} />
                        <SendButton onVote={onVote} onStop={onStop} />
                    </InputContext.Provider>
                </Box>
                <Logs />
            </ParentComponent>
        </ToastContext.Provider>
    );
};